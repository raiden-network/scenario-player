version: 2

settings:
  gas_price: {{ gas_price }}
  # Adapt to chain used
  services:
    pfs:
      url: {{ pfs_with_fee }}
    udc:
      enable: true
      token:
        deposit: true
        balance_per_node: {{ ms_reward_with_margin }}

token:
  address: "{{ transfer_token }}"
  balance_fund: 10_000_000_000_000_000_000

nodes:
  count: 2
  raiden_version: local

  default_options:
    gas-price: fast
    enable-monitoring: true
    proportional-fee:
      - "{{ transfer_token }}"
      - 0
    proportional-imbalance-fee:
      - "{{ transfer_token }}"
      - 0
    default-reveal-timeout: {{ settlement_timeout_min // 4 }}

# This is the MS3 scenario. A channel between two nodes is opened, a transfer is made. Then, node1 goes offline
# and node0 closes the channel. Before the monitoring trigger block is passed node1 gets back online.
# Node1 should be able to call close itself and there should be no reward for the ms

scenario:
  serial:
    tasks:
      - open_channel: {from: 0, to: 1, total_deposit: 1_000_000_000_000_000_000}
      - transfer: {from: 0, to: 1, amount: 500_000_000_000_000_000, expected_http_status: 200}
      ## Wait for Monitor Request to be sent
      - wait_blocks: 1
      - store_channel_info: {from: 0, to: 1, key: "MS Test Channel"}
      - stop_node: 1
      - wait: {{ wait_short }}
      - close_channel: {from: 0, to: 1}
      - assert: {from: 0 ,to: 1, total_deposit: 1_000_000_000_000_000_000, balance: 500_000_000_000_000_000, state: "closed"}
      - assert_events:
          contract_name: "TokenNetwork"
          event_name: "ChannelClosed"
          num_events: 1
          event_args: {closing_participant: 0}

      ## node1 gets back online before the MS reacts
      ## node1 should call updateNonClosingBalanceProof in this case and the MS wont react
      - start_node: 1

      ## The MS reacts after 0.3 * settle_timeout at the earliest. 0.3 * 180 = 54s
      ## The MS reacts after 0.8 * settle_timeout at the latest. 0.8 * 180 = 144s
      ## But we just need to check for the event from node1 before the monitoring service reacts
      - wait: {{ wait_short }}
      - assert_events:
          contract_name: "TokenNetwork"
          event_name: "NonClosingBalanceProofUpdated"
          num_events: 1
          event_args: {closing_participant: 0}

      ## Monitored channel must be settled before the monitoring service can claim its reward
      ## We already waited 22 blocks, so we can subtract that from the settlement_timeout_min.
      ## Add 20 seconds as safety margin.
      - wait: {{ settlement_timeout_min - wait_short + 20 }}
      # will fail for now since channel was closed by node1.
      - assert_ms_claim: {channel_info_key: "MS Test Channel", must_claim: False}